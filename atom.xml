<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Rusher's Blog With Octopress]]></title>
  <link href="http://LiuGuiRong.github.io/atom.xml" rel="self"/>
  <link href="http://LiuGuiRong.github.io/"/>
  <updated>2014-05-05T08:41:20+00:00</updated>
  <id>http://LiuGuiRong.github.io/</id>
  <author>
    <name><![CDATA[OX RuHSER]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[unity3d如何使用lua, 浅浅谈一下项目中遇到的一些问题]]></title>
    <link href="http://LiuGuiRong.github.io/blog/2014/05/05/cshape-and-lua-rb-gc-bug/"/>
    <updated>2014-05-05T07:02:00+00:00</updated>
    <id>http://LiuGuiRong.github.io/blog/2014/05/05/cshape-and-lua-rb-gc-bug</id>
    <content type="html"><![CDATA[<h3>为什么要在u3d使用lua这种脚本语言</h3>

<pre><code>1.  一款游戏上架到app商店的时候，审核比较繁琐，使用lua可以很好的实现一些逻辑bug或者新内容的热更新，相当于我们可以绕开app商店繁琐的审核，而直接在用户端做一些补丁工作。

2. lua简单易学并且如果底层支持力度足够的情况下可以实现所有你能想的到游戏功能，当然招聘相关的程序员,成本也低，这点对于小公司也足够有吸引力。
</code></pre>

<h3>lua以何种方式于u3d结合</h3>

<pre><code>使用一些第三方C#版的Lua(e.g. [UniLua](https://github.com/xebecnan/UniLua)), 但确实效率不高，使用lua动态库可以解决这一问题。

不过，这样做lua协程特性会有问题, 但协程的使用一般也是用于搭建程序框架，对用lua编写简单逻辑，看来是没有影响了。 
</code></pre>

<h3>以 dll方式使用lua，需要注意的一些隐秘bug.</h3>

<pre><code>在lua逻辑中，一般来说，都会模拟注册一个类并使用lua自定义数据类型userdate来保存。在保存的时候，通过改写userdata的元方法，到达模拟面向对象的目的。可能会出现下面的绑定代码.
</code></pre>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>    lua_state.register(class_name, function, gc)
</span></code></pre></td></tr></table></div></figure>


<pre><code>但是大家都知道，cshape和lua都是基于垃圾回收机制的语言，在我们注册一个函数给lua的时候，其实是使用了cshape的特性 delegate. 如果我们直接使用cshape的类方法(即使是static)去注册给lua的话，cshape在下一次垃圾回收的时候就会主动回收该委托，以至于lua找不到该委托而报错。解决办法是使用一个静态变量来存储lua需要使用的函数方法，以确保在程序退出的时候才施放，保持lua一直有绑定的cshape方法可以使用。
</code></pre>

<h3>关于如何调优</h3>

<pre><code>u3d自带性能调优工具，这里就不多说了。下面谈谈lua：

关于内存泄漏. lua的内存泄漏主要是由于复杂数据结构比如table,引用了对象但是在逻辑执行完的时候并没有解引用引起的。相对于静态语言很多优秀的调优工具如vs上的vld等，带自动垃圾回收的语言可以通过对象快照来分辨内存使用情况。这就需要我们找到一个逻辑执行完毕的开始与结束的位置，做两次快照，以鉴别是否产生了内存泄漏。 说直白一点，比如游戏的时候，进入场景，打一些怪物，开启一些功能，再完整退出。 这就是一个整个游戏的开始于结束点。快照并做一些对比。

lua快照工具：[snapshot](https://github.com/cloudwu/lua-snapshot)

关于函数效率. 这个就不多说了，比较简单，可以自己写一个profiler，或者使用我写的这个模块[lua profiler](https://github.com/LiuGuiRong/lua_profiler_4_pub)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[游戏客户端脚本系统设计]]></title>
    <link href="http://LiuGuiRong.github.io/blog/2013/10/18/gc-smart-ui-/"/>
    <updated>2013-10-18T10:00:00+00:00</updated>
    <id>http://LiuGuiRong.github.io/blog/2013/10/18/gc-smart-ui-</id>
    <content type="html"><![CDATA[<h3>概述</h3>

<p>客户端脚本框架设计文档。</p>

<h4>目标和对象</h4>

<ol>
<li><p>目标：在不改变C++底层框架的基础上，程序能做到满足需求的灵活修改。</p></li>
<li><p>对象：游戏逻辑层。UI,SKILL,CONTROL,etc&hellip;</p></li>
</ol>


<h4>范围</h4>

<p>理想化的客户端框架应该是支持一切客户端应用逻辑的热更新与热加载，但是在实际项目中，由于历史造成项目代码复杂度增加的原因，所以完全推翻现有客户端逻辑层改由脚本执行是不可行的，也正因为如此，维持一个较好的逻辑层剥离粒度是本文其中的一个重点设计范畴。</p>

<h3>设计</h3>

<h4>技能</h4>

<p><strong>已完成,详见<a href="http://doc.oxrush.com/design/ClientScriptDesign/ClientDesign.html">link</a></strong></p>

<h4>UI</h4>

<h5>代码结构</h5>

<h6>现有UI结构</h6>

<ol>
<li>cpp layer</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">//widget管理类，负责windows消息，AS消息，以及逻辑帧驱动统一调用。</span>
</span><span class='line'><span class="n">Class</span> <span class="n">UIManager</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//窗口基类。所有UI都从该类派生。</span>
</span><span class='line'><span class="n">Class</span> <span class="n">widget</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//窗口实例类，对应客户端小地图功能。</span>
</span><span class='line'><span class="n">Class</span> <span class="n">MiniMap</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>2.script layer</p>

<figure class='code'><figcaption><span>ui.lua start:1 mark:1,6</span><a href='http://doc.oxrush.com/design/ClientScriptDesign/passscript/ui/ui.lua'>source link </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="k">function</span> <span class="nf">RegisterUIVisibleChangedHandler</span><span class="p">(</span><span class="n">uiName</span><span class="p">,</span> <span class="n">handler</span><span class="p">)</span>
</span><span class='line'>        <span class="n">UIVisibleChangedHandlers</span><span class="p">[</span><span class="n">uiName</span><span class="p">]</span> <span class="o">=</span> <span class="n">handler</span><span class="p">;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--Called from C++</span>
</span><span class='line'><span class="k">function</span> <span class="nf">OnUIVisibleChanged</span><span class="p">(</span><span class="n">uiName</span><span class="p">,</span> <span class="n">visible</span><span class="p">)</span>
</span><span class='line'>        <span class="kd">local</span> <span class="n">handler</span> <span class="o">=</span> <span class="n">UIVisibleChangedHandlers</span><span class="p">[</span><span class="n">uiName</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">handler</span> <span class="k">then</span>
</span><span class='line'>                <span class="n">handler</span><span class="p">(</span><span class="n">visible</span><span class="p">);</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>class.lua start:1 mark:1</span><a href='http://doc.oxrush.com/design/ClientScriptDesign/passscript/ui/class.lua'>source link </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="k">function</span> <span class="nf">InitClassInfo</span><span class="p">()</span>
</span><span class='line'>  <span class="n">SetClassInfo</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">??&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">zhanA&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">TargetZhan&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">Rage&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h6>新的结构</h6>

<ol>
<li>cpp layer</li>
</ol>


<figure class='code'><figcaption><span>UIAdapter.cpp start:1 mark:1 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">//游戏界面管理类</span>
</span><span class='line'><span class="k">class</span> <span class="nc">UIAdapter</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//AS统一调用入口</span>
</span><span class='line'>  <span class="n">Static</span> <span class="kt">bool</span> <span class="n">OnAsEvt</span><span class="p">(</span><span class="n">args</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//c++事件统一回调入口</span>
</span><span class='line'>  <span class="n">Static</span> <span class="kt">bool</span> <span class="n">OnGameEvt</span><span class="p">(</span><span class="n">args</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//逻辑帧驱动</span>
</span><span class='line'>  <span class="n">Static</span> <span class="kt">void</span> <span class="n">OnLogicUpdate</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//渲染帧驱动</span>
</span><span class='line'>  <span class="n">Static</span> <span class="kt">void</span> <span class="n">OnRenderUpdate</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//脚本函数CALL</span>
</span><span class='line'>  <span class="n">Static</span> <span class="kt">bool</span> <span class="n">CallLua</span><span class="p">(</span><span class="n">luaobj</span><span class="p">,</span><span class="n">args</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>C++方面，去除了所有的实例类以及弱化了c++界面管理机制，改由lua中去管理，并且增加了lua的函数调用功能。</strong></p>

<ol>
<li>srcipt layer</li>
</ol>


<figure class='code'><figcaption><span>widget.lua start:1 mark:1 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="nb">module</span><span class="p">(</span><span class="s1">&#39;</span><span class="s">widget&#39;</span><span class="p">,</span> <span class="n">package</span><span class="p">.</span><span class="n">seeeall</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;</span><span class="s">class&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">widget</span> <span class="o">=</span> <span class="n">class</span><span class="p">.</span><span class="n">new</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--创建窗口实例</span>
</span><span class='line'><span class="n">widget</span><span class="p">.</span><span class="n">create</span> <span class="o">=</span> <span class="k">function</span><span class="p">(</span><span class="n">ui_name</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">inst</span> <span class="o">=</span> <span class="n">create</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">--dd to listlist</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">add</span><span class="p">()</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--逻辑帧</span>
</span><span class='line'><span class="n">widget</span><span class="p">.</span><span class="n">on_logic_update</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--渲染帧</span>
</span><span class='line'><span class="n">widget</span><span class="p">.</span><span class="n">on_render_update</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--显示</span>
</span><span class='line'><span class="n">widget</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--隐藏</span>
</span><span class='line'><span class="n">wdget</span><span class="p">.</span><span class="n">hide</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>uimgr.lua start:1 mark:1 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="nb">module</span><span class="p">(</span><span class="s1">&#39;</span><span class="s">uimgr&#39;</span><span class="p">,</span> <span class="n">package</span><span class="p">.</span><span class="n">seeeall</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--逻辑层UI列表</span>
</span><span class='line'><span class="n">uimgr</span><span class="p">.</span><span class="n">ui_list</span> <span class="o">=</span> <span class="n">uimgr</span><span class="p">.</span><span class="n">ui_list</span> <span class="ow">or</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--程式每帧</span>
</span><span class='line'><span class="n">uimgr</span><span class="p">.</span><span class="n">onupdate</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
</span><span class='line'>  <span class="c1">--if render...</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">update_render</span><span class="p">()</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">--if logic...</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">update_logic</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--创建窗口实例</span>
</span><span class='line'><span class="n">uimgr</span><span class="p">.</span><span class="n">create</span> <span class="o">=</span> <span class="k">function</span><span class="p">(</span><span class="n">ui_name</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">inst</span> <span class="o">=</span> <span class="n">create</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">--add to listlist</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">add</span><span class="p">()</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--事件回调</span>
</span><span class='line'><span class="n">uimgr</span><span class="p">.</span><span class="n">onevt</span> <span class="o">=</span> <span class="k">function</span><span class="p">(</span><span class="n">evt_type</span><span class="p">,</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>as.lua start:1 mark:1 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="nb">module</span><span class="p">(</span><span class="s1">&#39;</span><span class="s">ui.as&#39;</span><span class="p">,</span> <span class="nb">package.seeall</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>main_skill_bar.lua start:1 mark:1 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="nb">module</span><span class="p">(</span><span class="s1">&#39;</span><span class="s">ui.main_skill_bar&#39;</span><span class="p">,</span> <span class="nb">package.seeall</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--ui对应as对象</span>
</span><span class='line'><span class="kd">local</span> <span class="n">as_func</span> <span class="o">=</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>**新的脚本框架，是以老的c++UI管理类的管理方式为基础的扩展。</p>

<h5>玩家数据</h5>

<p>考虑到c++层对玩家数据的依赖，考虑使用老的数据方式，即paramtable管理方式。最后具体使用方式，技术会议再讨论。</p>

<h5>事件机制</h5>

<p>基于现有的客户端事件机制，增加UI事件以及AS事件类型。</p>

<ol>
<li>UI事件：</li>
</ol>


<p>从开启客户端，到玩家进入游戏场景之间的各个阶段，都需要使用UI事件机制，如玩家创建角色，进入场景等，脚本层会对相应的UI逻辑做处理.</p>

<ol>
<li>AS事件：</li>
</ol>


<p>c++需要做的只是做一个lua注册AS事件的函数绑定，以及AS事件的统一回调，做一个适配层。</p>

<ol>
<li>键盘事件：</li>
</ol>


<p>主要为一些进入场景能通过快捷键打开某一个UI的提供机制。UI的快捷键纳入客户端脚本热键模块统一管理。</p>

<h5>函数扩展</h5>

<h2>tolua++ binder:</h2>

<pre><code>void ASInvolk();

void ConnectAS();

void NewMsg();

void MsgAddLong();

void MsgAddStr();

...
</code></pre>

<hr />

<h5>设计中遇到问题</h5>

<p>**实际在分析c++界面实例类的时候，会出现比较复杂的游戏逻辑处理，可能会操作多个消息的解码创建。想法是把客户端处理消息的操作提供给lua,由lua每个界面实例自己去解决。</p>

<h3>约束、限制和系统参数</h3>

<p><strong>1. 技能逻辑框架已经搭建并测试完成，后续需要结合需求验证框架稳定/健壮性</strong></p>

<p><strong>2. UI逻辑框架待完善</strong></p>

<h3>关于测试</h3>

<p>通过创建界面实例，由程序发起进行测试。</p>

<h4>测试类别</h4>

<p><strong>whitebox</strong></p>

<h4>期待反馈</h4>

<p><strong> my email: <a href="&#109;&#x61;&#105;&#108;&#116;&#x6f;&#x3a;&#x68;&#114;&#x6f;&#x6f;&#109;&#x6b;&#x65;&#101;&#x70;&#101;&#x72;&#64;&#x67;&#109;&#x61;&#105;&#108;&#46;&#x63;&#111;&#109;">&#x68;&#x72;&#x6f;&#x6f;&#109;&#107;&#x65;&#x65;&#x70;&#x65;&#114;&#x40;&#103;&#109;&#x61;&#x69;&#x6c;&#x2e;&#99;&#x6f;&#109;</a> </strong></p>

<p><strong> <a href="http://www.lua.org/manual/5.1/">lua5.1 manual</a> </strong></p>
]]></content>
  </entry>
  
</feed>
